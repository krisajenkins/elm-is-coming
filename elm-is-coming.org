#+OPTIONS: toc:nil num:nil
#+OPTIONS: reveal_history:t
#+REVEAL_THEME: black
#+REVEAL_TRANS: convex
#+REVEAL_EXTRA_CSS:
#+COPYRIGHT: Â© Kris Jenkins, 2015
#+AUTHOR:
#+TITLE: Elm is Coming
#+EMAIL: @krisajenkins

* What's Hard?

** Frontend Programming
- Mirror the backend
- /plus/ Error-handling
- /plus/ Users
- /plus/ Marketing
- /plus/ Everyone else
- /plus/ Constantly in flux
- /plus/ Demands are on the rise

** And...

Our tools suck.

* Elm is...
- Functional
- A variant of Haskell
- (Written in Haskell)
- Compiles to JavaScript
- Easy to learn
- Structurally simple

** Elm has...
- Friendly static typing
- Pure rendering
- One-way data-flow
- Immutable data
- Pure functions
- Control over /side-effects/

** Elm also has..
- Fast build tool
- Package manager
- Semver enforcement
- And cool stuff

* Overview of an Elm App

** Two Datatypes, Two functions

*** Datatype 1: Model

#+BEGIN_SRC elm
type Model = Model
  {username : String
  ,password : String
  ,serverError : Maybe Http.Error}
#+END_SRC

*** Datatype 2: Action

#+BEGIN_SRC elm
type Action
  = ChangeUsername String
  | ChangePassword String
  | Submit
  | LoginResponse (Result Error AuthToken)
#+END_SRC

*** Function 1: Update

#+BEGIN_SRC elm
  update : Action -> Model -> Model
#+END_SRC

*** Example

#+BEGIN_SRC elm
  update : Action -> Model -> Model
  update action model =
    case action of
      ...
      ChangeUsername s -> {model | username <- s}
      ...
#+END_SRC
*** But...

Sometimes we need to schedule future actions.

*** Function 1: Update (v2)

#+BEGIN_SRC elm
  update : Action -> Model -> Model
#+END_SRC

...becomes:

#+BEGIN_SRC elm
  update : Action -> Model -> (Model, Effects Action)
#+END_SRC

*** Example

#+BEGIN_SRC elm
  update : Action -> Model -> (Model, Effects Action)
  update action model =
    case action of
      ...
      Submit -> (model
                ,postForm "/login"
                          model.username
                          model.password)
      ...


  postForm : ... -> Effects Action
  postForm ... = LoginResponse ( ... )
#+END_SRC

*** Enhanced example
#+BEGIN_SRC elm
  update : Action -> Model -> (Model, Effects Action)
  update action model =
    case action of
      ...
      Submit -> ({model | loading <- True}
                ,postForm "/login"
                          model.username
                          model.password)
      ...
#+END_SRC

*** Function 2: Rendering

#+BEGIN_SRC elm
view : Model -> Html
#+END_SRC

*** Example
#+BEGIN_SRC elm
  loginForm : Model -> Html
  loginForm model =
    form []
         [input [type' "text"
                ,class "form-control"
                ,autofocus True]
                []
         [input [type' "password"
                ,class "form-control"]
                []
         ,button [class "btn btn-primary"
                 ,type' "button"
                 ,disabled (model.username == "" ||
                            model.password == "")]
                 [text "Log In"]]
#+END_SRC

*** But...

An HTML UI is an event source.

*** Function 2: Rendering (v2)

#+BEGIN_SRC elm
view : Model -> Html
#+END_SRC

...becomes:

#+BEGIN_SRC elm
view : Address Action -> Model -> Html
#+END_SRC

*** Example
#+BEGIN_SRC elm
  loginForm : Address Action -> Model -> Html
  loginForm address model =
    form []
         [input [type' "text"
                ,class "form-control"
                ,onChange address Username
                ,autofocus True]
                []
         [input [type' "password"
                ,class "form-control"
                ,onChange address Password]
                []
         ,button [class "btn btn-primary"
                 ,type' "button"
                 ,disabled (model.username == "" ||
                            model.password == "")
                 ,onClick address Submit]
                 [text "Log In"]]
#+END_SRC

*** Elm Architecture

#+BEGIN_SRC elm
type Model

type Action

update : Action -> Model -> (Model, Effects Action)

view : Address Action -> Model -> Html
#+END_SRC

* Simple Demo

* Compare to MVC

| Elm    | MVC        |
|--------+------------|
| Model  | Model      |
| Action | -          |
| View   | View       |
| Update | Controller |

** Huge Structural Difference

*** When It's Simple

#+BEGIN_SRC ascii
M --- C --- V
#+END_SRC

*** MVC As It Grows

#+BEGIN_SRC ascii
     M --- C --- V
                / \
               /   \
              /     \
             /       \
            /         \
           /           \
  M - C - V     M - C - V
                       / \
                      /   \
                     /     \
                    /       \
                   /         \
                  /           \
         M - C - V     M - C - V
#+END_SRC

*** Here's The Problem

Simple:

#+BEGIN_SRC elm
view : Address Action -> Model -> Html
#+END_SRC

Grows to

#+BEGIN_SRC elm
view : Address Action -> Model -> Everything
#+END_SRC

*** Here's The Solution

#+BEGIN_SRC text
       M
      / \
     /   o
    m   / \
       m   m

       C
      / \
     /   o
    c   / \
       c   c

       V
      / \
     /   \
    v     v
           \
            \
             v

  M --- C --- V
#+END_SRC

* Links

Beeline

http://krisajenkins.github.io/beeline-demo/

Blog

http://blog.jenkster.com

Sewing Browser

http://www.getstitching.com/

Lunar Lander Game

http://krisajenkins.github.io/lunarlander

Learn!

http://www.meetup.com/West-London-Hack-Night/
